using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestMKL.Benchmarks
{
    static class DenseMatrices
    {
        public const int order = 10;

        #region Matrices

        // During LU (and elimination) it will need pivoting at entry [2,2]
        public static double[,] matrixPivot = new double[,] {
            { 1.0000,    2.6667,    7.0000,    5.0000,    2.5000,    9.0000,    6.0000,    2.2500,    4.0000,    3.0000 },
            { 0.0000,    0.3333,    1.0000,   -2.5000,    5.5000,   -7.7500,    2.0000,    5.7500,    3.0000,    2.0000 },
            { 2.0000,    2.0000,    4.0000,    9.0000,    1.7500,    5.0000,    3.5000,    2.0000,    6.0000,    8.0000 },
            { 1.0000,    1.0000,    3.0000,    5.0000,    1.7500,    6.0000,    4.0000,    7.0000,    6.0000,    9.0000 },
            { 5.0000,    0.6667,    4.5000,    5.0000,    0.2500,    2.3333,    1.5000,    1.2500,    9.0000,    0.7500 },
            { 0.3333,    2.0000,    4.0000,    5.0000,    5.0000,    9.0000,    2.5000,    4.0000,    1.0000,    3.0000 },
            { 0.2500,    6.0000,    8.0000,    0.7500,    1.0000,    3.0000,    8.0000,    1.2500,    1.0000,    2.0000 },
            { 1.0000,    1.0000,    1.0000,    7.0000,    1.0000,    5.0000,    2.0000,    7.0000,    1.0000,    2.0000 },
            { 3.5000,    9.0000,    9.0000,    2.0000,    8.0000,    4.0000,    2.5000,    6.0000,    7.0000,    9.0000 },
            { 3.0000,    7.0000,    9.0000,    4.0000,    2.6667,    9.0000,    8.0000,    5.0000,    7.0000,    3.0000 }};

        //positive definite
        public static double[,] matrixPosdef = new double[,] {
           { 10.0596,    0.6708,    0.1079,    0.1817,    0.7366,    0.1991,    0.4254,    0.7312,    0.4871,    0.5281 },
            { 0.6708,   10.5186,    0.6820,    0.5403,    0.8603,    0.5774,    0.4968,    0.6008,    0.1870,    0.5064 },
            { 0.1079,    0.6820,   10.8314,    0.4094,    0.0566,    0.5328,    0.7044,    0.3039,    0.6370,    0.7229 },
            { 0.1817,    0.5403,    0.4094,   10.9841,    0.4525,    0.3227,    0.5208,    0.3132,    0.3775,    0.3001 },
            { 0.7366,    0.8603,    0.0566,    0.4525,   10.2691,    0.5605,    0.3692,    0.7124,    0.6211,    0.7887 },
            { 0.1991,    0.5774,    0.5328,    0.3227,    0.5605,   10.6665,    0.2735,    0.1243,    0.9909,    0.0968 },
            { 0.4254,    0.4968,    0.7044,    0.5208,    0.3692,    0.2735,   10.4607,    0.7856,    0.4433,    0.6404 },
            { 0.7312,    0.6008,    0.3039,    0.3132,    0.7124,    0.1243,    0.7856,   10.2262,    0.3642,    0.4479 },
            { 0.4871,    0.1870,    0.6370,    0.3775,    0.6211,    0.9909,    0.4433,    0.3642,   10.5841,    0.1346 },
            { 0.5281,    0.5064,    0.7229,    0.3001,    0.7887,    0.0968,    0.6404,    0.4479,    0.1346,   10.1788 }};

        // singular with 1D nullspace. LAPACK LU factorization does not flag it as singular!!!
        public static double[,] matrixSing1 = new double[,] {
            { 5.0389,    0.2156,    9.4373,    8.2953,    4.0673,    3.8888,    4.5039,    2.7529,    5.7474,    1.1704 },
            { 6.4681,    5.5984,    5.4916,    8.4909,    6.6693,    4.5474,    2.0567,    7.1667,    3.2604,    8.1468 },
            { 3.0775,    3.0082,    7.2839,    3.7253,    9.3373,    2.4669,    8.9965,    2.8338,    4.5642,    3.2486 },
            { 1.3872,    9.3941,    5.7676,    5.9318,    8.1095,    7.8442,    7.6259,    8.9620,    7.1380,    2.4623 },
            { 6.6851,    5.9753,    3.7231,    6.5385,    9.8797,    1.4888,    1.2281,    8.3437,    4.3851,    3.9582 },
            { 3.6246,    2.8662,    4.4653,    9.3350,    7.5675,    9.1371,    2.8495,    3.9003,    7.2086,    3.7569 },
            { 7.8811,    8.0082,    6.4630,    6.6846,    4.1705,    5.5828,    6.7323,    4.9790,    0.1861,    5.4655 },
            { 7.8030,    8.9611,    5.2120,    2.0678,    9.7179,    5.9887,    6.6428,    6.9481,    6.7478,    5.6192 },
            { 6.6851,    5.9753,    3.7231,    6.5385,    9.8797,    1.4888,    1.2281,    8.3437,    4.3851,    3.9582 },
            { 1.3350,    8.8402,    9.3713,    0.7205,    8.6415,    8.9971,    4.0732,    6.0963,    4.3782,    3.9813 }};

        // singular with 2D nullspace
        public static double[,] matrixSing2 = new double[,] {
            { 1.0000,    2.6667,    7.0000,    5.0000,    2.5000,    9.0000,    6.0000,    2.2500,    4.0000,    3.0000 },
            { 0.0000,    0.3333,    1.0000,   -2.5000,    5.5000,   -7.7500,    2.0000,    5.7500,    3.0000,    2.0000 },
            { 2.0000,    2.0000,    4.0000,    9.0000,    1.7500,    5.0000,    3.5000,    2.0000,    6.0000,    8.0000 },
            { 1.0000,    1.0000,    3.0000,    5.0000,    1.7500,    6.0000,    4.0000,    7.0000,    6.0000,    9.0000 },
            { 5.0000,    0.6667,    4.5000,    5.0000,    0.2500,    2.3333,    1.5000,    1.2500,    9.0000,    0.7500 },
            { 0.3333,    2.0000,    4.0000,    5.0000,    5.0000,    9.0000,    2.5000,    4.0000,    1.0000,    3.0000 },
            { 0.2500,    6.0000,    8.0000,    0.7500,    1.0000,    3.0000,    8.0000,    1.2500,    1.0000,    2.0000 },
            { 1.0000,    1.0000,    1.0000,    7.0000,    1.0000,    5.0000,    2.0000,    7.0000,    1.0000,    2.0000 },
            { 1.0000,    1.0000,    1.0000,    7.0000,    1.0000,    5.0000,    2.0000,    7.0000,    1.0000,    2.0000 },
            { 1.0000,    1.0000,    1.0000,    7.0000,    1.0000,    5.0000,    2.0000,    7.0000,    1.0000,    2.0000 } };
        #endregion

        #region Matrix-vector multiplication
        public static double[] x = new double[] { 3.4484, 1.9563, 2.7385, 4.2828, 5.3064, 4.3251, 0.1117, 4.0487, 2.6311, 2.6269 };
        public static double[] matrixPivot_x = Utilities.MatrixTimesVector(matrixPivot, x);
        public static double[] matrixPosdef_x = Utilities.MatrixTimesVector(matrixPosdef, x);
        public static double[] matrixSing1_x = Utilities.MatrixTimesVector(matrixSing1, x);
        public static double[] matrixSing2_x = Utilities.MatrixTimesVector(matrixSing2, x);
        //public static double[] matrixPivot_x = new double[] { 129.6255, 24.9998, 136.5104, 138.4874, 94.5804, 129.8738, 69.8411, 101.5039, 189.2711, 166.3288 };
        //public static double[] matrixPosdef_x = new double[] { 47.5221, 38.4450, 40.6103, 56.7521, 69.8638, 57.1604, 16.9381, 53.8137, 42.7137, 39.6583 };
        //public static double[] matrixSing_x = new double[] { 147.4165, 198.9431, 145.6368, 203.7051, 187.6598, 194.9344, 171.2053, 206.4243, 187.6598, 182.5304 };
        #endregion

        #region factorization
        public static double[,] matrixPivot_L = new double[,] {
            { 1.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000},
            { 0.700000000000000, 1.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000},
            { 0.200000000000000, 0.296878936778343,  1.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000},
            { 0.200000000000000, 0.101561996458584, -0.113249698822564,  1.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000},
            { 0.000000000000000, 0.039058700551134,  0.176818919005663, -0.484906542960240,  1.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000},
            { 0.050000000000000, 0.699220466618463,  0.844451573716728, -0.331295118269131, -0.863097189214223,  1.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000},
            { 0.600000000000000, 0.773437271117538,  0.406895919175001,  0.052792355932608, -0.684415331679188,  0.241574580261808,  1.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000},
            { 0.400000000000000, 0.203123992917168,  0.231873657358311,  0.942630231346478, -0.024512562835827,  0.346259134817979, -0.586219649578724,  1.000000000000000,  0.000000000000000, 0.000000000000000},
            { 0.200000000000000, 0.101561996458584,  0.345123356180875,  0.393366691999442,  0.151258061047848, -0.165741667413086,  0.355479089484414, -0.373132913343019,  1.000000000000000, 0.000000000000000},
            { 0.066660000000000, 0.229167553739405,  0.540742649585241,  0.391641616972103,  0.581445473311093, -0.628021544221750,  0.073364914263990,  0.198333706840520, -0.659496414881728, 1.000000000000000} };

        public static double[,] matrixPivot_U = new double[,] {
            { 5.000000000000000, 0.666700000000000, 4.500000000000000,  5.000000000000000, 0.250000000000000,  2.333300000000000, 1.500000000000000,  1.250000000000000,  9.000000000000000,  0.750000000000000 },
            { 0.000000000000000, 8.533310000000000, 5.850000000000000, -1.500000000000000, 7.825000000000000,  2.366690000000000, 1.450000000000000,  5.125000000000000,  0.699999999999999,  8.475000000000000 },
            { 0.000000000000000, 0.000000000000000, 4.363258219846695,  4.445318405167514, 0.126922319709468,  7.830719589116065, 5.269525541671404,  0.478495449010993,  1.992184744255161,  0.333951010803546 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  6.655773965243499, 0.169651292192538,  5.179800873632784, 2.149507285667150,  6.283684233638220, -0.645479075235204,  1.027081931408493 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000, 5.254188422424477, -6.715339873935628, 2.053923221210496,  8.512216710419459,  2.307405929749960,  2.107967404794224 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000, 0.000000000000000, -9.464114793276034, 4.946127816512377,  6.628553101741168,  0.155913636719474, -2.085750939237665 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000, 0.000000000000000,  0.000000000000000, 3.931767755773501,  3.984307335236524,  1.823617652005219, -2.248396632918166 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000, 0.000000000000000,  0.000000000000000, 0.000000000000000, -5.326013241595878,  3.475940545000401,  4.388758952026945 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000, 0.000000000000000,  0.000000000000000, 0.000000000000000,  0.000000000000000,  4.020824604788080,  9.242293465315168 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000, 0.000000000000000,  0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  3.279189768619025 } };

        public static double[,] matrixSing1_L = new double[,] {
            { 1.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.176016038370278,  1.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.639365063252592, -0.614258360352771,  1.000000000000000,  0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.169392597480047,  0.937271415669778,  0.483113323627930,  1.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.848244534392407, -0.102399521086466, -0.157685267248492, -0.297951665007305, 1.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.459910418596389, -0.102304679402225,  0.241323495128026, -0.616809201690111, 0.512564638063054,  1.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.390491175089772, -0.014895235256103,  0.592595216332522,  0.356105296144049, 0.662819266563724, -0.112366063390058,  1.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.990090215832815,  0.129282468147027, -0.219107740852256,  0.443190110914549, 0.902218083252459,  0.383040953999945,  0.804780729738722,  1.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.820710306936849, -0.121987453223332,  0.092298751705360, -0.358045299789388, 0.392713916638845,  0.140868030195130, -0.326422176831072, -0.057833721997052, 1.000000000000000, 0.000000000000000 },
            { 0.848244534392407, -0.102399521086466, -0.157685267248492, -0.297951665007305, 1.000000000000000, -0.000000000000000, -0.000000000000000,  0.000000000000000, 0.000000000000000, 1.000000000000000 }};

        public static double[,] matrixSing1_U = new double[,] {
            { 7.881100000000000, 8.008200000000000, 6.463000000000000,  6.684600000000000,  4.170500000000000,  5.582800000000000,  6.732300000000000,  4.979000000000000,  0.186100000000000,  5.465500000000000 },
            { 0.000000000000000, 7.984528361523138, 4.630008344012891,  4.755203189910038,  7.375425111976755,  6.861537660986411,  6.440907224879775,  8.085616144954384,  7.105243415259291,  1.500284342287244 },
            { 0.000000000000000, 0.000000000000000, 8.149104930011509,  6.942323612760134,  5.931244539892565,  4.534109598009734,  4.155883695803547,  4.536158665706923,  9.992869331893191, -1.402487553050741 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000, -8.222666816980754, -1.843190226576928, -0.570196867983617, -5.111842801766466, -4.517001323090270, -7.140553832400010,  2.326871552171181 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000,  7.483424452047309, -1.999090238705725, -4.690751306515450,  4.317691010621143,  4.403003582815848, -0.052108475965917 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  6.850252639898760, -1.339450773287580, -3.656302980631695, -1.222787079562291,  3.197143660640692 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  8.779744117436120, -3.342289399487064, -1.837369037792679,  1.533002651565117 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  4.163735174483451,  8.973685945725602, -3.735995619097978 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, -1.142200259654890,  4.661224880916461 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, -0.000000000000000 } };

        public static double[,] matrixSing2_L = new double[,] {
            { 1.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.050000000000000, 1.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.200000000000000, 0.424585593459663,  1.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.200000000000000, 0.145250319902324, -0.367766167014451,  1.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.000000000000000, 0.055860350798981,  0.202113859866139, -0.449906270841256,  1.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.066660000000000, 0.327747205180784,  0.411524986987106,  0.402178044266143,  0.558013589001937,  1.000000000000000,  0.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.400000000000000, 0.290500639804648, -0.020952368691029,  0.947235655469339, -0.011468660376666, -0.551108581990643,  1.000000000000000,  0.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.200000000000000, 0.145250319902324,  0.346813798323421,  0.357051263855895,  0.051914573559068,  0.084278229695684, -0.639985251284143,  1.000000000000000, 0.000000000000000, 0.000000000000000 },
            { 0.200000000000000, 0.145250319902324, -0.367766167014451,  1.000000000000000,  0.000000000000000,  0.000000000000000, -0.000000000000000, -0.000000000000000, 1.000000000000000, 0.000000000000000 },
            { 0.200000000000000, 0.145250319902324, -0.367766167014451,  1.000000000000000,  0.000000000000000,  0.000000000000000, -0.000000000000000, -0.000000000000000, 0.000000000000000, 1.000000000000000 } };

        public static double[,] matrixSing2_U = new double[,] {
            { 5.000000000000000, 0.666700000000000, 4.500000000000000, 5.000000000000000, 0.250000000000000,  2.333300000000000,  1.500000000000000,  1.250000000000000,  9.000000000000000,  0.750000000000000 },
            { 0.000000000000000, 5.966665000000000, 7.775000000000000, 0.500000000000000, 0.987500000000000,  2.883335000000000,  7.925000000000000,  1.187500000000000,  0.550000000000000,  1.962500000000000 },
            { 0.000000000000000, 0.000000000000000, 2.798847010851119, 3.787707203270168, 2.030721726458583,  7.309117497881983,  2.335159171832171,  1.495804607766650,  1.966477923597185,  2.016750772835412 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000, 7.320365399968534, 1.553396054709096,  6.802580795318743,  1.407683752767439,  7.127621572316886, -0.156683627466405,  2.306638948740800 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000, 5.733283523251122, -6.327814296564842,  1.718664434028685,  8.588104632113717,  2.501331417045492,  2.520532106076385 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000,  5.686730476887156, -2.683540556614327, -4.746937770612114, -1.922217971214086, -0.857312933653597 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000, -2.145910148952346, -8.082750240382218,  1.399179437268729,  4.543652155097146 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000, -1.704801944667576,  4.421654510873604,  9.891191732628037 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000 },
            { 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000 } };

        #endregion
    }
}